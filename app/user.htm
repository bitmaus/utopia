
<script>
//(initiate)
//generate client token ...server generates server token, checks secure cookie for session token (yes, then update session token)
//(accept) ...user has access
//(authorize) ...user signs in - server token to create user/password hash ...server creates session token
//(authenticate) ...user signs up - server token to create user/password hash ...server sends email

function checkSession() {
  //document.cookie = 'foo=bar; Secure;'; // only use https
//document.cookie = 'foo=bar; Secure; HttpOnly'; //only for server use
//document.cookie = 'foo=bar; path="/dashboard"'; // check path (domain is automatic)
//document.cookie = 'foo=bar; expires=Mon, 26 Mar 2018 17:04:05 UTC'; // set expiration, none creates session cookie
//document.cookie = 'foo=bar; max-age=31536000' //expires in 1 year

// document.cookie stores all as... 'foo1=bar1; foo2=bar2; foo3=bar3'
}

function checkPassword() {
//var todo = document.getElementById("todo");
//var todo2 = document.getElementById("todo2");

//if(todo.value !== todo2.value) {
}

function hashInformation() {
//token = encodeBase64Url(header) + '.' + encodeBase64Url(payload) + '.' + encodeBase64Url(signature) 
//# token is now: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI 
}

  function User () {
        this.token = token;
	// set cookies
	this.checkToken = function () { }
	this.checkUser = function (user, password) { } }

function login() { alert("display login"); };
function signup() { alert("display signup"); };

var mode = 'AES-GCM', length = 256, ivLength = 12, salt = 'a-unique-salt';
var encrypted, decrypted;
function supportsCrypto () {alert(window.crypto && crypto.subtle && window.TextEncoder);} //supportsCrypto();

async function genEncryptionKey (password, mode, length, salt) {
	var algo = {name: 'PBKDF2',hash: 'SHA-256',salt: new TextEncoder().encode(salt),iterations: 1000}, derived = { name: mode, length: length }, encoded = new TextEncoder().encode(password), key = await crypto.subtle.importKey('raw', encoded, { name: 'PBKDF2' }, false, ['deriveKey']);
	return crypto.subtle.deriveKey(algo, key, derived, false, ['encrypt', 'decrypt']);}

async function encrypt (text, password, mode, length, ivLength, salt) {
	var algo = {name: mode,length: length,iv: crypto.getRandomValues(new Uint8Array(ivLength))}, key = await genEncryptionKey(password, mode, length, salt), encoded = new TextEncoder().encode(text);
	return {cipherText: await crypto.subtle.encrypt(algo, key, encoded),iv: algo.iv};}

async function decrypt (encrypted, password, mode, length, salt) {
	var algo = {name: mode,length: length,iv: encrypted.iv}, key = await genEncryptionKey(password, mode, length, salt), decrypted = await crypto.subtle.decrypt(algo, key, encrypted.cipherText);
	return new TextDecoder().decode(decrypted);}

async function startCrypt() { encrypted = await encrypt('email address', document.getElementById('p').value, mode, length, ivLength, salt); console.log(encrypted); } // { cipherText: ArrayBuffer, iv: Uint8Array }
async function endCrypt() { var decrypted = await decrypt(encrypted, document.getElementById('p').value, mode, length, salt); console.log(decrypted); } // Secret text
</script>
