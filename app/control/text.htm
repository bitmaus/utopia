
<script>
    function getCaretCharacterOffsetWithin(element) {
        var caretOffset = 0;
        var doc = element.ownerDocument || element.document;
        var win = doc.defaultView || doc.parentWindow;
        var sel;
        if (typeof win.getSelection != "undefined") {
            sel = win.getSelection();
            if (sel.rangeCount > 0) {
                var range = win.getSelection().getRangeAt(0);
                var preCaretRange = range.cloneRange();
                preCaretRange.selectNodeContents(element);
                preCaretRange.setEnd(range.endContainer, range.endOffset);
                caretOffset = preCaretRange.toString().length;
            }
        } else if ( (sel = doc.selection) && sel.type != "Control") {
            var textRange = sel.createRange();
            var preCaretTextRange = doc.body.createTextRange();
            preCaretTextRange.moveToElementText(element);
            preCaretTextRange.setEndPoint("EndToEnd", textRange);
            caretOffset = preCaretTextRange.text.length;
        }
        return caretOffset;
    }

    function getSelectionText() {
        var text = "";
        if (window.getSelection) {
            text = window.getSelection().toString();
        } else if (document.selection && document.selection.type != "Control") {
            text = document.selection.createRange().text;
        }
        return text;
    }</script>

<div id="content" oncontextmenu="showContext(); return false;" contenteditable="true">
    lorem ipsum dolor lorem ipsum dolorlorem ipsum dolor
    <br/>
    <span style="font-weight:bold">This is a b<span style="color:blue">old <span style="font-style:italic">line</span>that continues </span> on</span> and on</div>

<script>
    var content = document.getElementById("content");
    
    function showContext() {
        changeStyle(getSelectionText()); }
            
    function changeStyle(selection) {       
        var position = getCaretCharacterOffsetWithin(content) - selection.length;

        var html = content.innerHTML;
        var first = html.substring(0, position);
        var last = html.substring(position, html.length);

        if (selection == "")
            content.innerHTML = first + "new tag" + last;
        else 
	    content.innerHTML = first + last.replace(selection, "<span style='font-weight:bold'>" + selection + "</span>"); }</script>

<!-- htm office...

design context menu with icons and easy fill/slide inputs...
...updates style and inserts tag
......insert span, and apply end spans whenever a preset end span is found

...sheet/chart/report/slide, adjust align/justify/indent, spacing, symbol, page number
...light/dark, TOC, find/replace, word count, print preview, save/export (HTM), custom (screenwriter), comments on/off
...rulers, selectors

HTML constructs with CSS (use page vs. text features)

font-family: Roboto
font-size: 12px
font-style: italic
font-weight: bold
text-decoration: underline
text-decoration: line-through

vertical-align: super (with reduced size)
vertical-align: sub (with reduced size)

color: blue
background-color: gray (both page and highlight)

<a href="">selected text</a>  ...anchor?

<img src="" />

height:
width:
<div> for header/footer

<hr/>
<br/>

<p style="page-break-before: always">

@media print{
  footer {page-break-after: always;}
}

<ul style="list-style-type:circle">
<li>Coffee</li>
<li>Tea</li>
<li>Milk</li>
</ul>

<ol>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>

specialized tip/note/important/etc. <div>
comment <span>

<code><pre>

margin:

review tinymce for missed features

Document editor (html office) (text, spreadsheet with layers, image, data, code), resume maker/document/reference editor
code signatures, "perfect" font, use recipe example, upload new forms

inlcude folder/file explorer
function createTree()
{
    <div class="parent"
    <div class="folder parent/child"><div class="file"></div></div>
    parent folder to parent/child folder[...] or child file
}
folder (book), file (paper)

use database for (stamps)
...email
...messages
...tags
...user/account

import os
os.listdir("path")

To open a text file, use:
fh = open("hello.txt", "r")

To read a text file, use:
fh = open("hello.txt","r")
print fh.read()

To read one line at a time, use:
fh = open("hello".txt", "r")
print fh.readline()

To read a list of lines use:
fh = open("hello.txt.", "r")
print fh.readlines()

To write to a file, use:
fh = open("hello.txt","w")
write("Hello World")
fh.close()

To write to a file, use:
fh = open("hello.txt", "w")
lines_of_text = ["a line of text", "another line of text", "a third line"]
fh.writelines(lines_of_text)
fh.close()

import os

path = "c:\\python25"

i = 0
for (path, dirs, files) in os.walk(path):
    print path
    print dirs
    print files
    print "----"
    i += 1
    if i >= 4:
        break


add drag and drop?

// Check for the various File API support.
if (window.File && window.FileReader && window.FileList && window.Blob) {
  // Great success! All the File APIs are supported.
} else {
  alert('The File APIs are not fully supported in this browser.');
}
-->

<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>

<div id="drop_zone">Drop files here</div>
<output id="list"></output>

<script>
  function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
  }

  // Setup the dnd listeners.
  var dropZone = document.getElementById('drop_zone');
  dropZone.addEventListener('dragover', handleDragOver, false);
  dropZone.addEventListener('drop', handleFileSelect, false);
</script>


<style>
  .thumb {
    height: 75px;
    border: 1px solid #000;
    margin: 10px 5px 0 0;
  }
</style>

<input type="file" id="files2" name="files2[]" multiple />
<output id="list2"></output>

<script>
  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // Loop through the FileList and render image files as thumbnails.
    for (var i = 0, f; f = files[i]; i++) {

      // Only process image files.
      if (!f.type.match('image.*')) {
        continue;
      }

      var reader = new FileReader();

      // Closure to capture the file information.
      reader.onload = (function(theFile) {
        return function(e) {
          // Render thumbnail.
          var span = document.createElement('span');
          span.innerHTML = ['<img class="thumb" src="', e.target.result,
                            '" title="', escape(theFile.name), '"/>'].join('');
          document.getElementById('list2').insertBefore(span, null);
        };
      })(f);

      // Read in the image file as a data URL.
      reader.readAsDataURL(f);
    }
  }

  document.getElementById('files2').addEventListener('change', handleFileSelect, false);
</script>

...larg files 
var blob = file.slice(startingByte, endindByte);
reader.readAsBinaryString(blob);

<style>
  #byte_content {
    margin: 5px 0;
    max-height: 100px;
    overflow-y: auto;
    overflow-x: hidden;
  }
  #byte_range { margin-top: 5px; }
</style>

<input type="file" id="files3" name="file3" /> Read bytes: 
<span class="readBytesButtons">
  <button data-startbyte="0" data-endbyte="4">1-5</button>
  <button data-startbyte="5" data-endbyte="14">6-15</button>
  <button data-startbyte="6" data-endbyte="7">7-8</button>
  <button>entire file</button>
</span>
<div id="byte_range"></div>
<div id="byte_content"></div>

<script>
  function readBlob(opt_startByte, opt_stopByte) {

    var files = document.getElementById('files3').files;
    if (!files.length) {
      alert('Please select a file!');
      return;
    }

    var file = files[0];
    var start = parseInt(opt_startByte) || 0;
    var stop = parseInt(opt_stopByte) || file.size - 1;

    var reader = new FileReader();

    // If we use onloadend, we need to check the readyState.
    reader.onloadend = function(evt) {
      if (evt.target.readyState == FileReader.DONE) { // DONE == 2
        document.getElementById('byte_content').textContent = evt.target.result;
        document.getElementById('byte_range').textContent = 
            ['Read bytes: ', start + 1, ' - ', stop + 1,
             ' of ', file.size, ' byte file'].join('');
      }
    };

    var blob = file.slice(start, stop + 1);
    reader.readAsBinaryString(blob);
  }
  
  document.querySelector('.readBytesButtons').addEventListener('click', function(evt) {
    if (evt.target.tagName.toLowerCase() == 'button') {
      var startByte = evt.target.getAttribute('data-startbyte');
      var endByte = evt.target.getAttribute('data-endbyte');
      readBlob(startByte, endByte);
    }
  }, false);
</script>


monitor progress... 

<style>
  #progress_bar {
    margin: 10px 0;
    padding: 3px;
    border: 1px solid #000;
    font-size: 14px;
    clear: both;
    opacity: 0;
    -moz-transition: opacity 1s linear;
    -o-transition: opacity 1s linear;
    -webkit-transition: opacity 1s linear;
  }
  #progress_bar.loading {
    opacity: 1.0;
  }
  #progress_bar .percent {
    background-color: #99ccff;
    height: auto;
    width: 0;
  }
</style>

<input type="file" id="files4" name="file4" />
<button onclick="abortRead();">Cancel read</button>
<div id="progress_bar"><div class="percent">0%</div></div>

<script>
  var reader;
  var progress = document.querySelector('.percent');

  function abortRead() {
    reader.abort();
  }

  function errorHandler(evt) {
    alert(evt);
    //switch(evt.target.error.code) {
      //case evt.target.error.NOT_FOUND_ERR:
        //alert('File Not Found!');
        //break;
      //case evt.target.error.NOT_READABLE_ERR:
        //alert('File is not readable');
        //break;
      //case evt.target.error.ABORT_ERR:
       // break; // noop
      //default:
       // alert('An error occurred reading this file.');
    //};
  }

  function updateProgress(evt) {
    // evt is an ProgressEvent.
    if (evt.lengthComputable) {
      var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
      // Increase the progress bar length.
      if (percentLoaded < 100) {
        progress.style.width = percentLoaded + '%';
        progress.textContent = percentLoaded + '%';
      }
    }
  }

  function handleFileSelect(evt) {
    // Reset progress indicator on new file selection.
    progress.style.width = '0%';
    progress.textContent = '0%';

    reader = new FileReader();
    //reader.onerror = errorHandler;
    reader.onprogress = updateProgress;
    reader.onabort = function(e) {
      alert('File read cancelled');
    };
    reader.onloadstart = function(e) {
      document.getElementById('progress_bar').className = 'loading';
    };
    reader.onload = function(e) {
      // Ensure that the progress bar displays 100% at the end.
      progress.style.width = '100%';
      progress.textContent = '100%';
      setTimeout("document.getElementById('progress_bar').className='';", 2000);
    }

    // Read in the image file as a binary string.
    reader.readAsBinaryString(evt.target.files[0]);
  }

  document.getElementById('files4').addEventListener('change', handleFileSelect, false);
</script>


directory contents...

<ul id="filelist"></ul>

<script>
function toArray(list) {
  return Array.prototype.slice.call(list || [], 0);
}

function listResults(entries) {
  // Document fragments can improve performance since they're only appended
  // to the DOM once. Only one browser reflow occurs.
  var fragment = document.createDocumentFragment();

  entries.forEach(function(entry, i) {
    var img = entry.isDirectory ? '<img src="folder-icon.gif">' :
                                  '<img src="file-icon.gif">';
    var li = document.createElement('li');
    li.innerHTML = [img, '<span>', entry.name, '</span>'].join('');
    fragment.appendChild(li);
  });

  document.querySelector('#filelist').appendChild(fragment);
}

function onInitFs(fs) {
  alert('directory read...');
  //let items = event.dataTransfer.items;
  //FileSystemDirectoryEntry.getDirectory([path]
  fs.root.getDirectory('C:\Users\v-masebo\Desktop\local', {}, function(dirEntry){
  var dirReader = dirEntry.createReader();
  dirReader.readEntries(function(entries) {
    for(var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      if (entry.isDirectory){
        console.log('Directory: ' + entry.fullPath);
      }
      else if (entry.isFile){
        console.log('File: ' + entry.fullPath);
      }
    }

  }, errorHandler);
}, errorHandler);

  //var dirReader = fs.root.createReader();
  //var entries = [];

  // Call the reader.readEntries() until no more results are returned.
  //var readEntries = function() {
    // dirReader.readEntries (function(results) {
      //if (!results.length) {
        //listResults(entries.sort());
      //} else {
        //entries = entries.concat(toArray(results));
        //readEntries();
      //}
    //}, errorHandler);
  //};

  //readEntries(); // Start reading dirs.

}



//window.requestFileSystem(window.TEMPORARY, 1024*1024, onInitFs, errorHandler);

//window.webkitRequestFileSystem(window.TEMPORARY, 1024*1024, onInitFs, errorHandler);

//window.webkitStorageInfo.requestQuota(PERSISTENT, 1024*1024, 
    //function(grantedBytes) {
        //window.requestFileSystem(window.PERSISTENT, grantedBytes, onInitFs, errorHandler);
      //  window.webkitRequestFileSystem(window.TEMPORARY, 1024*1024, onInitFs, errorHandler);
    //}, 
  //  errorHandler
//);


//remove directory... 
function remove() {
window.requestFileSystem(window.TEMPORARY, 1024*1024, function(fs) {
  fs.root.getDirectory('music/genres/jazz', {}, function(dirEntry) {

    dirEntry.remove(function() {
      console.log('Directory removed.');
    }, errorHandler);

  }, errorHandler);
}, errorHandler); }

//copy, move, rename...
function copy(cwd, src, dest) {
  cwd.getFile(src, {}, function(fileEntry) {

    cwd.getDirectory(dest, {}, function(dirEntry) {
      fileEntry.copyTo(dirEntry);
    }, errorHandler);

  }, errorHandler);
}

function copy() {
window.requestFileSystem(window.TEMPORARY, 1024*1024, function(fs) {
  copy(fs.root, '/folder1/me.png', 'folder2/mypics/');
}, errorHandler);  }

function rename(cwd, src, newName) {
  cwd.getFile(src, {}, function(fileEntry) {
    fileEntry.moveTo(cwd, newName);
  }, errorHandler);
}

function rename() {
window.requestFileSystem(window.TEMPORARY, 1024*1024, function(fs) {
  rename(fs.root, 'me.png', 'you.png');
}, errorHandler);
//The following example moves "me.png" (located in the root directory) to a folder named "newfolder".
}

function move(src, dirName) {
  fs.root.getFile(src, {}, function(fileEntry) {

    fs.root.getDirectory(dirName, {}, function(dirEntry) {
      fileEntry.moveTo(dirEntry);
    }, errorHandler);

  }, errorHandler);
}

function move() {
window.requestFileSystem(window.TEMPORARY, 1024*1024, function(fs) {
  move('/me.png', 'newfolder/');
}, errorHandler); }
</script>



<p>New work...</p>
<ul id="filelist2"></ul>

<script>
  alert('loaded');
function toArray(list) {
  return Array.prototype.slice.call(list || [], 0);
}

function listResults2(entries) {
  // Document fragments can improve performance since they're only appended
  // to the DOM once. Only one browser reflow occurs.
  var fragment = document.createDocumentFragment();
alert('list results');
alert(entries.length);
  entries.forEach(function(entry, i) {
    var img = entry.isDirectory ? '<img src="folder-icon.gif">' :
                                  '<img src="file-icon.gif">';
    var li = document.createElement('li');
    li.innerHTML = [img, '<span>', entry.name, '</span>'].join('');
    fragment.appendChild(li);
  });

  document.querySelector('#filelist2').appendChild(fragment);
}

function onInitFs2(fs) {
alert(fs.root.name + ' ' + fs.root.fullPath);
fs.root.fullPath = "c:\Users\v-masebo\Desktop";
  var dirReader = fs.root.createReader();
  var entries = [];

  // Call the reader.readEntries() until no more results are returned.
  var readEntries2 = function() {
     dirReader.readEntries (function(results) {
       alert(results.length);
      if (!results.length) {
        listResults2(entries.sort());
      } else {
        entries = entries.concat(toArray(results));
        readEntries();
      }
    }, errorHandler2);
  };

  readEntries2(); // Start reading dirs.

}

  function errorHandler2(evt) {
    alert('error' + evt);
  }

window.webkitStorageInfo.requestQuota(PERSISTENT, 1024*1024, 
    function(grantedBytes) {
        //window.requestFileSystem(window.PERSISTENT, grantedBytes, onInitFs, errorHandler);
        window.webkitRequestFileSystem(window.PERSISTENT, 1024*1024, onInitFs2, errorHandler2);
    }, 
    errorHandler2
);
</script>

<style>
#dropzone {
  text-align: center;
  width: 300px;
  height: 100px;
  margin: 10px;
  padding: 10px;
  border: 4px dashed red;
  border-radius: 10px;
}

#boxtitle {
  display: table-cell;
  vertical-align: middle;
  text-align: center;
  color: black;
  font: bold 2em "Arial", sans-serif;
  width: 300px;
  height: 100px;
}

body {
  font: 14px "Arial", sans-serif;
}
</style>
<p>Drag files and/or directories to the box below!</p>

<div id="dropzone">
  <div id="boxtitle">
    Drop Files Here
  </div>
</div>

<h2>Directory tree:</h2>

<ul id="listing">
</ul>

<script>

let dropzone = document.getElementById("dropzone");
let listing = document.getElementById("listing");
//handle files dropped in
function scanFiles(item, container) {
  let elem = document.createElement("li");
  elem.innerHTML = item.name;
  container.appendChild(elem);
 
 if (item.isDirectory) {
    let directoryReader = item.createReader();
    let directoryContainer = document.createElement("ul");
    container.appendChild(directoryContainer);
    directoryReader.readEntries(function(entries) {
        entries.forEach(function(entry) {
          scanFiles(entry, directoryContainer);
      });
    });
  }
}
//prevent default dragover behavior
dropzone.addEventListener("dragover", function(event) {
    event.preventDefault();
}, false);
//handle the drop event
dropzone.addEventListener("drop", function(event) {
  let items = event.dataTransfer.items;
  alert(items[0].webkitGetAsEntry());
  event.preventDefault();
  listing.innerHTML = "";
 
  for (let i=0; i<items.length; i++) {
    let item = items[i].webkitGetAsEntry();
    
    if (item) {
        scanFiles(item, listing);
    }
  }
}, false);

</script>
more attempts...
<input type="file" id="holder" />
<script>

holder.ondrop = function (e) {
    this.className = '';
    e.preventDefault();
    alert(e.dataTransfer.files);
    let items = e.dataTransfer.files;
  alert(items.webkitGetAsEntry());
  event.preventDefault();
  listing.innerHTML = "";
 
  //for (let i=0; i<items.length; i++) {
    let item = items.webkitGetAsEntry();
    
    if (item) {
        scanFiles(item, listing);
    }
  }
    //readfiles(e.dataTransfer.files);
//}

function simulateDrop() {
    var fileInput = document.getElementById('fileInput4'),
        file = createFile();
        //file = fileInput.files[0];        
    holder.ondrop({ 
        dataTransfer: { files: [ file ] }, 
        preventDefault: function () {} 
    });
}

//var fileInput4 = document.getElementById('fileInput4'),
//file = fileInput.files[0]; 

function createFile() {
  var create = ["<!doctype html><div>file</div>"];
  var blob = new Blob([create], {"type" : "text/html"});
  return ( blob.size > 0 ? blob : "file creation error" )
};
//createFile()
</script>
<input  id="file_input"  type="file" webkitdirectory directory  />

<script>
  var rootDirName;
  function showDirectory() {
var files = document.getElementById('file_input').files; 
var filePath = files[0].webkitRelativePath; 
rootDirName = filePath.substring(0,filePath.indexOf("/")); 
alert(rootDirName);

window.webkitStorageInfo.requestQuota(PERSISTENT, 1024*1024, 
    function(grantedBytes) {
        //window.requestFileSystem(window.PERSISTENT, grantedBytes, onInitFs, errorHandler);
        window.webkitRequestFileSystem(window.PERSISTENT, 1024*1024, onInitFs3, errorHandler2);
    }, 
    errorHandler2
); }

function onInitFs3(fs) { alert('running...'); fs.root.getDirectory(rootDirName, {}, 
  function(dirEntry){ 
  //your code 
  alert(dirEntry);
  //fs.root.getDirectory(rootDirName, {}, 
  //function(dirEntry){
    var dirReader = dirEntry.createReader();
    dirReader.readEntries(function(entries) {
      for(var i = 0; i < entries.length; i++) {
        var entry = entries[i];
        if (entry.isDirectory){ console.log('Directory: ' + entry.fullPath); }
        else if (entry.isFile){ console.log('File: ' + entry.fullPath); } } }, errorHandler2);

          }, errorHandler2); }
  //}); }


</script>

<button onclick="showDirectory();">Directory</button>

<input type="file" webkitdirectory directory multiple/>

<style>
    #editor { width: 600px }
    .control img { height: 16px; width: 16px; }
    .control img:hover { cursor: pointer; background-color: beige; }</style>

<div class="control">
    <img src="align-left.svg" onclick="setStyle('text-align', 'left');" />
    <img src="align-center.svg" onclick="setStyle('text-align', 'center');" />
    <img src="align-right.svg" onclick="setStyle('text-align', 'right');" />
    <img src="align-justify.svg" onclick="setStyle('text-align', 'justify');" /></div>

<div class="control">
    <img src="bold.svg" onclick="setStyle('font-weight', 'bold');" />
    <img src="italic.svg" onclick="setStyle('font-style', 'italic');" />
    <img src="underline.svg" onclick="setStyle('text-decoration', 'underline');" />
    <img src="strikethrough.svg" onclick="setStyle('text-decoration', 'line-through');" />
</div>
<div id="editor">This is sample text.<br/>With multiple lines...<br/><br/>How does it look with extra long sentences?</div>

<script>
    function setStyle(style, setting) {

        document.getElementById("editor").style[style] = setting; }</script>

font.svg, indent.svg, subscript.svg, superscript.svg

outdent.svg

also include markdown... (above is for html)
code.svg, image.svg, link.svg, list-ol.svg, list-ul.svg, table.svg, tasks.svg

from note...

bug.svg, exclamation-circle.svg, info-circle.svg, lightbulb.svg, question-circle.svg, quote-left.svg, quote-right.svg, star.svg, book.svg
