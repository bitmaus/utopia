
download.svg, file-alt.svg, file-signature.svg, folder.svg, folder-minus.svg, folder-open.svg, folder-plus.svg, upload.svg

from media...

play.svg, pause.svg, stop.svg, backward.svg, forward.svg, fast-backward.svg, fast-forward.svg, film.svg, music.svg, rss-square.svg, step-backward.svg, step-forward.svg

inlcude folder/file explorer
function createTree()
{
    <div class="parent"
    <div class="folder parent/child"><div class="file"></div></div>
    parent folder to parent/child folder[...] or child file
}
folder (book), file (paper)

use database for (stamps)
...email
...messages
...tags
...user/account

import os
os.listdir("path")

To open a text file, use:
fh = open("hello.txt", "r")

To read a text file, use:
fh = open("hello.txt","r")
print fh.read()

To read one line at a time, use:
fh = open("hello".txt", "r")
print fh.readline()

To read a list of lines use:
fh = open("hello.txt.", "r")
print fh.readlines()

To write to a file, use:
fh = open("hello.txt","w")
write("Hello World")
fh.close()

To write to a file, use:
fh = open("hello.txt", "w")
lines_of_text = ["a line of text", "another line of text", "a third line"]
fh.writelines(lines_of_text)
fh.close()

import os

path = "c:\\python25"

i = 0
for (path, dirs, files) in os.walk(path):
    print path
    print dirs
    print files
    print "----"
    i += 1
    if i >= 4:
        break

add drag and drop?

...larg files 
var blob = file.slice(startingByte, endindByte);
reader.readAsBinaryString(blob);

directory contents...
function listResults(entries) {

//remove directory... 
//copy, move, rename...

<input  id="file_input"  type="file" webkitdirectory directory  /> 

<p>Drag files and/or directories to the box below!</p>

<div id="dropzone">
<div id="boxtitle">Drop Files Here</div></div>

<h2>Directory tree:</h2>

<ul id="listing"></ul>

<div id="drop_zone">Drop files here</div>
<output id="list"></output>

<input type="file" id="files2" name="files2[]" multiple />

<input type="file" id="files4" name="file4" />
<button onclick="abortRead();">Cancel read</button>
<div id="progress_bar"><div class="percent">0%</div></div>

<p>Drag files and/or directories to the box below!</p>
<div id="dropzone"><div id="boxtitle">Drop Files Here</div></div>

<h2>Directory tree:</h2>
<ul id="listing"></ul>

<input type="file" id="holder" />

<input type="file" id="files" name="files[]" multiple />
<output id="list"></output>

<script>
  // Check for the various File API support.
if (window.File && window.FileReader && window.FileList && window.Blob) {
  // Great success! All the File APIs are supported.
} else {
  alert('The File APIs are not fully supported in this browser.');
}

  function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  document.getElementById('files').addEventListener('change', handleFileSelect, false);
</script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script>
var filenames=[], foldernames=[];

$.get("file:///C:/Users/v-masebo/Desktop",function(response){
    document.write(response);
    getNames();});

function getNames(){
    var files = document.querySelectorAll("a.icon.file");
    var folders = document.querySelectorAll("a.icon.dir");
    files.forEach(function(item){filenames.push(item.textContent)})
    folders.forEach(function(item){foldernames.push(item.textContent.slice(0,-1))})
    console.log(filenames);
    console.log(foldernames);}

let dropzone = document.getElementById("dropzone");
let listing = document.getElementById("listing");
//handle files dropped in
function scanFiles(item, container) {
  let elem = document.createElement("li");
  elem.innerHTML = item.name;
  container.appendChild(elem);
 
 if (item.isDirectory) {
    let directoryReader = item.createReader();
    let directoryContainer = document.createElement("ul");
    container.appendChild(directoryContainer);
    directoryReader.readEntries(function(entries) {
        entries.forEach(function(entry) {
          scanFiles(entry, directoryContainer);});});}}
//prevent default dragover behavior
dropzone.addEventListener("dragover", function(event) {event.preventDefault();}, false);
//handle the drop event
dropzone.addEventListener("drop", function(event) {
  let items = event.dataTransfer.items;
  alert(items[0].webkitGetAsEntry());
  event.preventDefault();
  listing.innerHTML = "";
 
  for (let i=0; i<items.length; i++) {
    let item = items[i].webkitGetAsEntry();
    if (item) {scanFiles(item, listing);}}}, false);
    
    //broadcasting side 
  navigator.mediaDevices.getUserMedia({audio: true,video: false}) // request cam
        .then(stream => {
         vid.srcObject = stream;
         context = new AudioContext();
         var source = context.createMediaStreamSource(stream);
         var processor = context.createScriptProcessor(1024, 2, 2);
         source.connect(processor);
         processor.connect(context.destination);

         processor.onaudioprocess = function(e) {
           audiodata = e.inputBuffer.getChannelData(1);
          socket.send(JSON.stringify({sound: audiodata, to: to, from: '$username', text:''}));
         };
         return vid.play(); // returns a Promise
       });

//receiving side object to array 
       if(typeof (message.sound) != "undefined"){
         //$('#video_stream_btn').trigger('click');
          var json_sound = message.sound;
          var array_sound = [];
          for(var i in json_sound){
            array_sound.push([i, json_sound [i]]);
          }
         if(typeof(context) == 'undefined'){
           context = new AudioContext();
         }
         play_sound(array_sound, context);
         return;
       }

// receiving side play sound function 
    function play_sound(raw,context){
        var audioBuffer = context.createBuffer(1, raw.length, context.sampleRate);
        audioBuffer.getChannelData(0).set(raw);
        var source = context.createBufferSource();
        source.buffer = audioBuffer;
        source.connect(context.destination);
        source.start(0);
    }

navigator.mediaDevices.getUserMedia({audio: {sampleSize: 16, channelCount: 2},video: true}) // request cam
        .then(stream => {
         vid.srcObject = stream; // don't use createObjectURL(MediaStream)
         context = new AudioContext();
         var source = context.createMediaStreamSource(stream);
         var processor = context.createScriptProcessor(1024, 2, 2);
         source.connect(processor);
         processor.connect(context.destination);

         processor.onaudioprocess = function(e) {
          // Do something with the data, i.e Convert this to WAV
          audiodata = new Int16Array(convertFloat32ToInt16(e.inputBuffer.getChannelData(0)));
          console.log(audiodata);
          socket.send(JSON.stringify({sound: audiodata, to: to, from: '$username', text:''}));

         };
         return vid.play(); // returns a Promise
       });

function convertFloat32ToInt16(buffer){
          l = buffer.length;
          buf = new Int16Array(l);

      while (l--) { buf[l] = Math.min(1, buffer[l])*0x7FFF; }

      return buf.buffer; }

if(typeof (message.sound) != "undefined"){
         if(typeof(context) == 'undefined'){context = new AudioContext();}
         sound_array = [];
         for (i in message.sound){sound_array[i] = (message.sound [i]);}

        sound_array32 = int16ToFloat32(sound_array);
         play_sound(sound_array32, context);
         return;}

function int16ToFloat32(inputArray) {
        let int16arr = new Int16Array(inputArray)
        var output = new Float32Array(int16arr.length);
        for (var i = 0; i < int16arr.length; i++) {
            var int = int16arr[i];
            var float = (int >= 0x8000) ? -(0x10000 - int) / 0x8000 : int / 0x7FFF;
            output[i] = float;
        }
        return output;}
        
        
        function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer.files; // FileList object.

    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0, f; f = files[i]; i++) {
      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                  f.size, ' bytes, last modified: ',
                  f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                  '</li>');
    }
    document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
  }

  // Setup the dnd listeners.
  var dropZone = document.getElementById('drop_zone');
  dropZone.addEventListener('dragover', handleDragOver, false);
  dropZone.addEventListener('drop', handleFileSelect, false);
  
  var reader;
  var progress = document.querySelector('.percent');

  function abortRead() {
    reader.abort();
  }

  function errorHandler(evt) {
    alert(evt);
    //switch(evt.target.error.code) {
      //case evt.target.error.NOT_FOUND_ERR:
        //alert('File Not Found!');
        //break;
      //case evt.target.error.NOT_READABLE_ERR:
        //alert('File is not readable');
        //break;
      //case evt.target.error.ABORT_ERR:
       // break; // noop
      //default:
       // alert('An error occurred reading this file.');
    //};
  }

  function updateProgress(evt) {
    // evt is an ProgressEvent.
    if (evt.lengthComputable) {
      var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
      // Increase the progress bar length.
      if (percentLoaded < 100) {
        progress.style.width = percentLoaded + '%';
        progress.textContent = percentLoaded + '%';
      }
    }
  }

  function handleFileSelect(evt) {
    // Reset progress indicator on new file selection.
    progress.style.width = '0%';
    progress.textContent = '0%';

    reader = new FileReader();
    //reader.onerror = errorHandler;
    reader.onprogress = updateProgress;
    reader.onabort = function(e) {
      alert('File read cancelled');
    };
    reader.onloadstart = function(e) {
      document.getElementById('progress_bar').className = 'loading';
    };
    reader.onload = function(e) {
      // Ensure that the progress bar displays 100% at the end.
      progress.style.width = '100%';
      progress.textContent = '100%';
      setTimeout("document.getElementById('progress_bar').className='';", 2000);
    }

    // Read in the image file as a binary string.
    reader.readAsBinaryString(evt.target.files[0]);
  }

  document.getElementById('files4').addEventListener('change', handleFileSelect, false);
  
  let dropzone = document.getElementById("dropzone");
let listing = document.getElementById("listing");
//handle files dropped in
function scanFiles(item, container) {
  let elem = document.createElement("li");
  elem.innerHTML = item.name;
  container.appendChild(elem);
 
 if (item.isDirectory) {
    let directoryReader = item.createReader();
    let directoryContainer = document.createElement("ul");
    container.appendChild(directoryContainer);
    directoryReader.readEntries(function(entries) {
        entries.forEach(function(entry) {
          scanFiles(entry, directoryContainer);});});}}
//prevent default dragover behavior
dropzone.addEventListener("dragover", function(event) {event.preventDefault();}, false);
//handle the drop event
dropzone.addEventListener("drop", function(event) {
  let items = event.dataTransfer.items;
  alert(items[0].webkitGetAsEntry());
  event.preventDefault();
  listing.innerHTML = "";
 
  for (let i=0; i<items.length; i++) {
    let item = items[i].webkitGetAsEntry();
    
    if (item) {scanFiles(item, listing);}}}, false);
    holder.ondrop = function (e) {
    this.className = '';
    e.preventDefault();
    alert(e.dataTransfer.files);
    let items = e.dataTransfer.files;
  alert(items.webkitGetAsEntry());
  event.preventDefault();
  listing.innerHTML = "";
 
  //for (let i=0; i<items.length; i++) {
    let item = items.webkitGetAsEntry();
    
    if (item) {
        scanFiles(item, listing);
    }
  }
    //readfiles(e.dataTransfer.files);
//}

function simulateDrop() {
    var fileInput = document.getElementById('fileInput4'),
        file = createFile();
        //file = fileInput.files[0];        
    holder.ondrop({ 
        dataTransfer: { files: [ file ] }, 
        preventDefault: function () {} 
    });
}</script>

<style>
#dropzone {text-align: center;width: 300px;height: 100px;margin: 10px;padding: 10px;border: 4px dashed red;border-radius: 10px;}
#boxtitle {display: table-cell;vertical-align: middle;text-align: center;color: black;font: bold 2em "Arial", sans-serif;width: 300px;height: 100px;}
body {font: 14px "Arial", sans-serif;}

.thumb {height: 75px;border: 1px solid #000;margin: 10px 5px 0 0;}
  
#byte_content {margin: 5px 0;max-height: 100px;overflow-y: auto;overflow-x: hidden;}
#byte_range { margin-top: 5px; }
  
#progress_bar {margin: 10px 0;padding: 3px;border: 1px solid #000;font-size: 14px;clear: both;opacity: 0;-moz-transition: opacity 1s linear;-o-transition: opacity 1s linear;-webkit-transition: opacity 1s linear;}
#progress_bar.loading {opacity: 1.0;}
#progress_bar .percent {background-color: #99ccff;height: auto;width: 0;}
  
#dropzone {text-align: center;width: 300px;height: 100px;margin: 10px;padding: 10px;border: 4px dashed red;border-radius: 10px;}

#boxtitle {display: table-cell;vertical-align: middle;text-align: center;color: black;font: bold 2em "Arial", sans-serif;width: 300px;height: 100px;}

body {font: 14px "Arial", sans-serif;}</style>