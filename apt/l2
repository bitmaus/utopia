
The L2 stack includes:<br/>
            <ul>
                <li><span class="bullet">L (inux)</span>, the free and open source kernel operating system</li>
                <li><span class="bullet">A (rch)</span>, the most simple and easy-to-use distribution</li>
                <li><span class="bullet">M (ongo)</span>, a JSON-driven database with flexible NoSQL design</li>
                <li><span class="bullet">P (ython)</span>, the next best thing to C-programming, handles all the "heavy" lifting</li></ul>

## Python and [Mongo](https://docs.mongodb.com)

`mongoimport --db <dbname> --collection <collection-name> --file <json-filename>'

See [Python-Markdown](https://python-markdown.github.io/), mail/message service/bot with database-stored templates? 
...use cython? minimize js and css, voice control (to text/from text), speech, home automation, replication/backup
...Use a compression such as `gzip`, tar -xvf yourfile.tar

test portion...
curl -X GET http://localhost:3000/todos/{_id}
curl -H "Content-Type: application/json" -X POST -d '{"title":"Hello World"}' http://localhost:3000/items    
curl -H "Content-Type: application/json" -X PUT -d '{"title":"Good Golly Miss Molly"}' http://localhost:3000/items/{_id}     
curl -H "Content-Type: application/json" -X DELETE http://localhost:3000/items/{_id}

use myNewDatabase
db.myCollection.insertOne( { x: 1 } );
db.getCollection("stats").find()

use database per user approach...

/var/log/mongodb/mongodb.log

$ mongo
> use myDb

show dbs
show collections

mongoexport --db Mydb --collection Items229900 --out D:/test.json

db.collection.update( { "_id.name": "Robert Frost", "_id.uid": 0 },
   { "categories": ["poet", "playwright"] },
   { upsert: true } )

db.bios.remove( { } )
db.products.remove( { qty: { $gt: 20 } } )

ObjectId("505bd76785ebb509fc183733").getTimestamp();

Since the encrypted folder is mounted, we can see the content of the files. Letâ€™s have a look:

cat /var/lib/mongo-encrypted/mongod.lock
cat /var/lib/mongo-encrypted/mongod.lock

http://feeds.bbci.co.uk/news/rss.xml

use calendar stickers, hour glass, agenda, with online/phone booking for automated check-in

email/newsletter? 

http_server = httpserver.HTTPServer(application1)
http_server.listen(8080)    # NOTE - port 8080

...
http_server2 = httpserver.HTTPServer(application2)
http_server2.listen(8081)   # NOTE - port 8081

ioloop.IOLoop.instance().start()


import tornado.httpserver
import tornado.ioloop
import tornado.web

class getToken(tornado.web.RequestHandler):
    def get(self):
        self.write("hello")

application = tornado.web.Application([
    (r'/', getToken),
])

if __name__ == '__main__':
    http_server = tornado.httpserver.HTTPServer(application, ssl_options={
        "certfile": "/var/pyTest/keys/ca.csr",
        "keyfile": "/var/pyTest/keys/ca.key",
    })
    http_server.listen(443)
    tornado.ioloop.IOLoop.instance().start()

for easy site/app development
...pymongo new/update/delete/search -> json object -> javascript class
...var note = new Pymp() ...add properties ...or .mp files?
note.sync();
note.

## [Git](https://git-scm.com/)

1. On remote machine, connect and clone with `ssh-agent bash -c 'ssh-add /somewhere/yourkey; git clone user@server:/path/to/repo/project.git'`.

  > [!NOTE]
  > If there are issues, use `git config core.sshCommand "ssh -i ssh.key"`.

1. Now you can work and make changes remotely:

```
	cd project
	vim README
	git commit -m 'fix for the README file'
	git push origin master
```

   Or push a branch, `ssh-agent bash -c 'ssh-add ../ssh.key; git push matt@192.168.86.184:~/public/site/tree.git branch-name'`.

### Work with branches and commits

1. Get the latest changes, `sudo git pull` or `git pull upstream master`. For a specific remote branch, `git fetch upstream <branch>`.

  > [!NOTE]
  > If there are issues, resolve and use `:wq` for exiting Git text editor.

1. Switch to the branch:

  - New branch is `git checkout -b <branch>`
  - Switch to branch is `git checkout <branch>`
  - Switch back is `git checkout master`
  - Delete branch is `git branch -d <branch>`

1. Make changes with commit:

```
	git add <filename>
	git add *
	git commit -m "message"
    git push origin <branch>
```

Some things to consider:

- To catch a branch up use `git fetch origin` then `git merge origin/yourbranch`
  
- To merge use `git merge branchone branchtwo`
  
- To update a branch:

```
	git remote update
	git checkout <branch_name>
	git pull origin <branch_name>
```

### Save and move work

```
	git stash
	# change branches, pull master, etc.
	git stash apply
```

Use `git stash pop` to delete stash after applying.
Use `git stash branch <branchName>` to make a branch out of changes.

### Compare changes

Use `git diff --stat <commit-ish> <commit-ish>`

> [!NOTE]
> `--stat` is for human-readable output, `--numstat` is for a table layout that scripts can interpret. You can also use `git log --author="Your name" --stat <commit1>..<commit2>` (with `--numstat` or `--shortstat` as well)

### To undo changes

To revert a merged branch use `git revert HEAD` or `git revert -m 1 dd8d6f587fa24327d5f5afd6fa8c3e604189c8d4>`

To undo a commit use `git reset --soft HEAD^` to keep changed files or `git reset --hard HEAD^` to remove changed files.

> [!NOTE]
> If the hard reset was a mistake or something else drastic? Use `git reflog` to view history and then `git reset --hard <commit-number>`. You can then remove individual files with `git reset HEAD path/to/unwanted/file`.

git remote add origin new.git.url/here
git remote set-url origin new.git.url/here

secure SSH key... (to only be read by you)
chmod 400 ~/.ssh/id_rsa

git branch -d branchName

git fetch <remote> <sourceBranch>:<destinationBranch>

basic git techniques...?

git checkout BranchB
git merge BranchA
git push origin BranchB

git checkout master
git pull origin master
git merge test
git push origin master

...or

git pull origin FixForBug
git push origin FixForBug

git issues...
I think other answers here are wrong, because this is a question of moving the mistakenly committed files back to the staging area from the previous commit, without cancelling the changes done to them. 

git reset --soft HEAD^ 
or

git reset --soft HEAD~1
Then reset the unwanted files in order to leave them out from the commit:

git reset HEAD path/to/unwanted_file
Now commit again, you can even re-use the same commit message:

git commit -c ORIG_HEAD  

for non-origin repos to master...
git push origin HEAD:<remoteBranch> 

### for remote developers

- hire developer (create user on dev machine, assign a port, send key)
    - need to run ssh, git and start branch
    - all changes go to https://dev.treeop.com:specialport

1. Give them the private key and change password with `ssh-keygen -p -f ~/.ssh/id_dsa`. This doesn't require any changes to the public key.

1. Limit accounts to git shell:

```
    cat /etc/shells    # see if git-shell exists, if not...
    which git-shell   # make sure git-shell is installed
    sudo vim /etc/shells  # add path to git-shell from last command
    sudo chsh git -s $(which git-shell) # edit shell for a user
```

sudo useradd -m nathan, or Add new users with `adduser username`
addgroup editors
sudo usermod -a -G readers nathan (or `usermod -a -G sudo username` for admin)

sudo chown -R :readers /READERS

`ssh matt@192.168.1.111 -i ssh.key`

*might need to `chmod 700 ~/.ssh`, then `chmod 600 ~/.ssh/authorized_keys`, then `chown $USER:$USER ~/.ssh -R` (for issues, check /var/log/auth.log)


git remote add upstream https://github.com/whoever/whatever.git

# Fetch all the branches of that remote into remote-tracking branches,
# such as upstream/master:

git fetch upstream
git pull upstream master
