

## the Bit Bolt, a simple, self-propagating stack with an *infinitive basis* core

1. Use a Linux machine (and starter USB), then use `fdisk -l` to find address. For Windows, use [Rufus](https://rufus.ie).

1. Go to [Arch Linux]() and download ISO image. (security checksum?)
`dd if=archlinux.iso of=/dev/sdX bs=16M && sync # image starter USB`

1. Use function keys (Esc, F8 or F10) to boot from USB into Arch Linux.
```
wifi-menu # for wireless
ping google.com -c 2
```

Your Bit Bolt USB is ready! Remove and reboot.

### dev and entertainment builds

see Inkscape, GIMP, Blender, OpenShot, FreeCAD, [Unreal](https://www.unrealengine.com), https://www.khronos.org/ (for OpenGL and Vulkan)

Unreal/VLC supports game streaming, use video cards and MiraCast, need [Ubuntu](http://www.ubuntu.com)?

Process uses x86-64 machines, try to cross-compile Arch Linux to run on any chip [here](https://archlinuxarm.org/wiki/Distcc_Cross-Compiling).
https://www.linuxjournal.com/article/8957 and https://www.linuxjournal.com/content/diy-build-custom-minimal-linux-distribution-source



1. Install needed packages, find graphics with `lspci | grep -e VGA -e 3D`:

convert -resize 640x480 -depth 16 -colors 65536 my_custom_image.png splash.png

## bit 

1. Get 

1. Mount the fat and ext4 extra partitions.

1. Create keys:

- SSH
```

ssh-keygen -y -f ~/.ssh/secret.key > ~/.ssh/public.key #needed?
```
- SSL, use `certbot certonly --standalone` or `certbot renew` and see `/etc/letsencrypt/live/<domain>/fullchain.pem|privkey.pem`.
- LUKS, use `dd if=/dev/urandom of=KEYFILE bs=1 count=4096`
- GPG
```
gpg --gen-key
gpg --output ~/mygpg.key --armor --export your_email@address.com
gpg --send-keys your_email@address.com --keyserver hkp://subkeys.pgp.net
```
- Monero
```
wget https://downloads.getmonero.org/linux64
tar -xvf linux64
./monerod # wait until chain is updated
./monero-wallet-cli # include name, wallet, view key, 25-word seed[for access]
address # to get address
```

### GPG [GNU Privacy Guard](https://www.gnupg.org/) for personal signing and encryption, good for private dealings.

(get public key)
gpg --search-keys 'myfriend@his.isp.com' --keyserver hkp://subkeys.pgp.net
gpg --import name_of_pub_key_file

(encrypt) *--armor optional
gpg --encrypt --recipient 'Your Name' foo.txt
gpg --encrypt --recipient 'myfriend@his.isp.net' foo.txt

(decrypt)
gpg --output foo.txt --decrypt foo.txt.gpg

(sign)
gpg --armor --detach-sign your-file.zip --output doc.sig
gpg --verify doc.sig crucial.tar.gz

gpg --search-keys 'myfriend@his.isp.com' --keyserver hkp://subkeys.pgp.net
gpg --import name_of_pub_key_file
gpg --verify doc.sig crucial.tar.gz

    cat ~/tree/public.key >> ~/.ssh/authorized_keys
    systemctl start sshd
    systemctl enable sshd.socket

1. Start a remote repository with `git init --bare` (and `--shared=group`?) then set permissions:
```
chown -R tree:tree /path/to/repo
chmod -R g+rw /path/to/repo
```

...and start the repo locally or remotely:
```
mkdir project
cd project
git init
git add .
git commit -m 'initial commit'
git remote add origin user@server:/path/to/repo/project.git
git push origin master
```


...to run browser, use `xinit google-chrome-stable --no...`

xrandr 
google-chrome-stable --window-size=2560,1440 --no-sandbox --disable-web-security --user-data-dir="~/tree" file:///C:/Users/v-masebo/Desktop/random.exe

## bolt 

...mount extra linux partition for keys?

1. Partition with `parted -s "$dev" mkpart primary ext4 1 100%`

1. Use encrpytion, if needed:
```
dd if=/dev/urandom of=/dev/sdd bs=1M
cryptsetup -c aes-xts-plain64 -y --use-random --key-size 512 --hash sha512 --iter-time 5000 luksFormat "$dev" --verify-passphrase
cryptsetup luksAddKey /dev/sda2 ~/tree/drive.key
cryptsetup open --type luks "$dev" bolt --key-file ~/tree/drive.key
```

1. Propagate the stack:
```
mkfs.ext4 /dev/mapper/bolt
mount /dev/mapper/bolt /mnt

cp -ax / /mnt
#cp -vaT /boot/vmlinux-linux to same...?
#cp -vaT /run/archiso/bootmnt/arch/boot/$(uname -m)/vmlinuz /mnt/boot/vmlinuz-linux
genfstab -U /mnt >> /mnt/etc/fstab

mount /dev/sda2 /temp
cp /temp/public.key >> /mnt/home/tree?/.ssh/authorized_keys
cp /temp/ssl_certs >> /mnt/home/ssl_certs

systemd-nspawn -b -D ~/MyContainer
```

1. Backup and restore

rsync -av --delete "/home/matt/site" "/usr/local/nginx/html" (could add -u to skip files newer on the receiver?)

scp -i ~/.ssh/mytest.key root@192.168.1.1:/<filepath on host>  <path on client> # copy backup files

automate with `crontab -e`, add entry `0 5 * * * rsync -av --delete /media/USBHDD1/shares /media/USBHDD2/shares` to backup at 5am every day.

1. Start a database replica with `mkdir -p /data/db`, then `service mongod start`

1. Get address with `ip address show`. (monero with wallet?)

Your private key should have permission 0600 while your public key have permission 0644.

append & to commands to run in background (or nohup command &)
...closing terminal terminates applications unless you run disown

chmod u+x scriptname # make script executable

chmod 600 file # owner can read and write
chmod 700 file # owner can read, write and execute
chmod 666 file # all can read and write
chmod 777 file # all can read, write and execute

mkdir -p /var/www/treeop
        ...copy over application files
sudo chown -R $USER:$USER /var/www/treeop
sudo chmod -R 755 /var/www/treeop
        cd site

sudo bash # for continued root access
sudo poweroff  # shutdown
sudo reboot # reboot

xargs mv -t /app/dest/ < /tmp/list.txt # move file by list in file

ps aux | grep spawn # find process
kill 9 10509        # end process

ls -R > myfile.txt # pull bash history

sudo ufw allow 1701    # allow port through firewall

iptables -A FORWARD -i eth1 -s 192.168.1.0/255.255.255.0 -j ACCEPT

ifconfig bridge0 create

ip link show

ip link add name br0 type bridge
ip addr add 172.20.0.1/16 dev br0
ip link set br0 up

...clone git repo also...

hold Ctrl and press ']' three times...

arch-install-scripts
